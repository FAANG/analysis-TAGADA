process {

  withName: SAMTOOLS_sort_reads {
    publishDir = [
      path: { params.output + '/alignment' },
      mode: 'copyNoFollow',
      overwrite: false
    ]
  }

  withName: FASTQC_control_reads {
    publishDir = [
      path: { params.output + '/control/reads' },
      mode: 'copy',
      overwrite: true
    ]
  }

  withName: STAR_index_genome {
    publishDir = [
      path: { params.output },
      mode: 'copy',
      overwrite: true
    ]
  }

  withName: STAR_align_reads {
    publishDir = [
      path: { params.output },
      mode: 'copy',
      overwrite: true,
      saveAs: { filename ->
        if (filename.endsWith('.bam'))
          'alignment/' + filename
        else if (filename.endsWith('.splicing.tsv'))
          'control/splicing/' + filename
      }
    ]
  }

  withName: BEDTOOLS_compute_coverage {
    publishDir = [
      path: { params.output + '/coverage' },
      mode: 'copy',
      overwrite: true
    ]
  }

  withName: TAGADA_filter_transcripts {
    publishDir = [
      path: { params.output + '/control/annotation' },
      mode: 'copy',
      overwrite: true,
      saveAs: { filename ->
        if (filename.endsWith('.txt')) filename
      }
    ]
  }

  withName: STRINGTIE_coalesce_transcripts {
    publishDir = [
      path: { params.output + '/annotation' },
      mode: 'copy',
      overwrite: true
    ]
  }

  withName: TMERGE_coalesce_transcripts {
    publishDir = [
      path: { params.output + '/annotation' },
      mode: 'copy',
      overwrite: true
    ]
  }

  withName: FEELNC_classify_transcripts {
    publishDir = [
      path: { params.output },
      mode: 'copy',
      overwrite: true,
      saveAs: { filename ->
        if (filename == 'novel.gtf')
          'annotation/' + filename
        else if (filename == 'lncRNA_classes.txt')
          'annotation/lnc_classification/' + filename
        else if (filename.endsWith('.gtf'))
          'annotation/lnc_classification/' + filename
        else if (filename == 'feelnc_classification_summary.txt')
          'control/lnc/' + filename
        else if (filename.endsWith('.feelncclassifier.log'))
          'control/lnc/' + filename
      }
    ]
  }

  withName: TAGADA_format_quantifications {
    publishDir = [
      path: { params.output + '/quantification' },
      mode: 'copy',
      overwrite: true
    ]
  }

  withName: TAGADA_cluster_expression {
    publishDir = [
      path: { params.output + '/control/expression' },
      mode: 'copy',
      overwrite: true
    ]
  }

  withName: TAGADA_control_expression {
    publishDir = [
      path: { params.output + '/control/expression' },
      mode: 'copy',
      overwrite: true
    ]
  }

  withName: TAGADA_control_annotation {
    publishDir = [
      path: { params.output + '/control/annotation' },
      mode: 'copy',
      overwrite: true,
      saveAs: { filename ->
        if (
          filename.endsWith('.png') ||
          filename.endsWith('.txt') ||
          filename == 'Plots' ||
          filename == 'Tables'
        ) filename
      }
    ]
  }

  withName: FEATURECOUNTS_control_exons {
    publishDir = [
      path: { params.output + '/control/exons' },
      mode: 'copy',
      overwrite: true
    ]
  }

  withName: MULTIQC_generate_report {
    publishDir = [
      path: { params.output + '/control' },
      mode: 'copy',
      overwrite: true
    ]
  }
}
