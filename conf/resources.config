params.'max-cpus' = 16
params.'max-memory' = 64.GB
params.'max-time' = 18.h

executor {
  cpus = params.'max-cpus' 
  memory = params.'max-memory' 
}

process {

  errorStrategy = {
    task.exitStatus in [104, 134, 139, 137, 143] ? 'retry' : 'terminate'
  }

  maxRetries = 2

  cpus = 1

  memory = { lowest(2.GB * task.attempt, params.max_memory) }

  time = { params.max_time }

  withName: BEDTOOLS_compute_coverage {
    memory = { lowest(2.GB + 2.GB * task.attempt, params.max_memory) }
  }

  withName: TAGADA_cluster_expression {
    memory = { lowest(2.GB + 2.GB * task.attempt, params.max_memory) }
  }

  withName: FEATURECOUNTS_control_exons {
    cpus = { lowest(4, params.max_cpus) }
    memory = { lowest(2.GB + 2.GB * task.attempt, params.max_memory) }
  }

  withName: TAGADA_format_quantifications {
    memory = { lowest(4.GB + 4.GB * task.attempt, params.max_memory) }
  }

  withName: MULTIQC_generate_report {
    memory = { lowest(4.GB + 4.GB * task.attempt, params.max_memory) }
  }

  withName: SAMTOOLS_sort_reads {
    cpus = { lowest(16, params.max_cpus) }
    memory = { lowest(8.GB + 8.GB * task.attempt, params.max_memory) }
  }

  withName: SAMTOOLS_merge_reads {
    cpus = {
      bams instanceof nextflow.util.BlankSeparatedList ?
      lowest(16, params.max_cpus) : 1
    }
  }

  withName: TRIMGALORE_trim_adapters {
    cpus = { lowest(16, params.max_cpus) }
    memory = { lowest( 8.GB + 8.GB * task.attempt, params.max_memory) }
  }

  withName: STRINGTIE_quantify_expression {
    memory = { lowest( 4.GB + 4.GB * task.attempt, params.max_memory) }
  }
  
  withName: TAGADA_filter_transcripts {
    memory = { lowest(8.GB + 8.GB * task.attempt, params.max_memory) }
  }

  withName: STRINGTIE_coalesce_transcripts {
    memory = { lowest(8.GB + 8.GB * task.attempt, params.max_memory) }
  }

  withName: TMERGE_coalesce_transcripts {
    memory = { lowest(8.GB + 8.GB * task.attempt, params.max_memory) }
  }

  withName: FEELNC_classify_transcripts {
    cpus = { lowest(4, params.max_cpus) }
    memory = { lowest(16.GB + 8.GB * task.attempt, params.max_memory) }
  }

  withName: STAR_align_reads {
    cpus = { lowest(16, params.max_cpus) }
    memory = { lowest(24.GB + 8.GB * task.attempt, params.max_memory) }
  }

  withName: STAR_index_genome {
    cpus = { lowest(16, params.max_cpus) }
    memory = { lowest(32.GB + 16.GB * task.attempt, params.max_memory) }
  }

  withName: STRINGTIE_assemble_transcripts {
    memory = { lowest(8.GB + 8.GB * task.attempt, params.max_memory) }
  }
}

def lowest(a, b) {
  a.compareTo(b) == 1 ? b : a;
}
