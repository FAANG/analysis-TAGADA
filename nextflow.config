params.'max-cpus' = 16
params.'max-memory' = 64.GB
params.'max-time' = 12.h

executor {
  cpus = params.'max-cpus' as int
  memory = params.'max-memory' as nextflow.util.MemoryUnit
}

profiles {
  slurm {
    process.executor = 'slurm'
  }

  kubernetes {
    process.executor = 'k8s'
  }

  docker {
    docker.enabled = true
    process.container = 'registry.gitlab.com/geneswitch/tagada:2.0.0'
  }

  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.pullTimeout = 2.h
    process.container = 'registry.gitlab.com/geneswitch/tagada:2.0.0'
  }

  test {
    includeConfig 'conf/test.config'
  }
}

process {

  cpus = 1

  memory = {
    get_min(2.GB * task.attempt, params.'max-memory' as nextflow.util.MemoryUnit)
  }

  time = params.'max-time' as nextflow.util.Duration

  errorStrategy = {
    task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate'
  }

  maxRetries = 2

  withLabel: cpu_16 {
    cpus = {
      get_min(16, params.'max-cpus' as int)
    }
  }

  withLabel: memory_4 {
    memory = {
      get_min(2.GB + 2.GB * task.attempt, params.'max-memory' as nextflow.util.MemoryUnit)
    }
  }

  withLabel: memory_8 {
    memory = {
      get_min(6.GB + 2.GB * task.attempt, params.'max-memory' as nextflow.util.MemoryUnit)
    }
  }

  withLabel: memory_16 {
    memory = {
      get_min(12.GB + 4.GB * task.attempt, params.'max-memory' as nextflow.util.MemoryUnit)
    }
  }

  withLabel: memory_32 {
    memory = {
      get_min(24.GB + 8.GB * task.attempt, params.'max-memory' as nextflow.util.MemoryUnit)
    }
  }

  withLabel: memory_64 {
    memory = {
      get_min(48.GB + 16.GB * task.attempt, params.'max-memory' as nextflow.util.MemoryUnit)
    }
  }
}

def get_min(a, b) {
  a.compareTo(b) == 1 ? b : a;
}
